local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local Camera = workspace.CurrentCamera
local UserInputService = game:GetService("UserInputService")

local isAimbotActive = false  -- Flag to check if aimbot should be active

-- Function to create and manage player tag, tracer, and 3D box
local function CreateTagAndTracer(player)
    local function OnCharacterAdded(character)
        local head = character:WaitForChild("Head", 10) -- Wait for the Head part
        if not head then return end

        -- Create Name Tag
        local tag = Instance.new("BillboardGui")
        tag.Name = "NameTag"
        tag.Adornee = head
        tag.Size = UDim2.new(0, 150, 0, 50)
        tag.StudsOffset = Vector3.new(0, 2, 0)
        tag.AlwaysOnTop = true

        local text = Instance.new("TextLabel")
        text.Size = UDim2.new(1, 0, 1, 0)
        text.BackgroundTransparency = 0.5
        text.BackgroundColor3 = Color3.fromRGB(0, 0, 0)  -- Background color for better readability
        text.TextScaled = true
        text.TextWrapped = false -- Disable text wrapping
        text.Font = Enum.Font.SourceSansBold
        text.TextStrokeTransparency = 0.5
        text.TextColor3 = player.Team and player.Team.TeamColor.Color or Color3.new(1, 1, 1)
        text.TextStrokeColor3 = Color3.fromRGB(0, 0, 0)  -- Stroke for better visibility
        text.Parent = tag
        tag.Parent = head

        -- Tracer
        local tracer = Drawing.new("Line")
        tracer.Thickness = 2
        tracer.Visible = false
        tracer.Transparency = 1

        -- 3D Box
        local box = Instance.new("BoxHandleAdornment")
        box.Name = "PlayerBox"
        box.Adornee = character:WaitForChild("HumanoidRootPart")
        box.Size = Vector3.new(4, 6, 4) -- Size of the box
        box.Color3 = player.Team and player.Team.TeamColor.Color or Color3.new(1, 0, 0) -- Set initial box color
        box.Transparency = 0.5
        box.Visible = false -- Initially set to not visible
        box.Parent = character

        -- Raycasting function to check if the player is visible (not behind walls)
        local function IsVisibleFromCamera(position)
            local ray = Ray.new(Camera.CFrame.Position, (position - Camera.CFrame.Position).unit * (position - Camera.CFrame.Position).Magnitude)
            local hitPart = workspace:FindPartOnRay(ray, character)
            return hitPart == nil -- True if nothing is hit, meaning the view is not obstructed
        end

        -- Update Name Tag, Tracer, and 3D Box
        local function UpdateNameTagAndTracer()
            if character and character:FindFirstChild("HumanoidRootPart") then
                local humanoid = character:FindFirstChildOfClass("Humanoid")
                local rootPart = character.HumanoidRootPart

                -- Update name and distance
                local health = humanoid and math.floor(humanoid.Health) or 0
                local maxHealth = humanoid and humanoid.MaxHealth or 100
                local distance = (Camera.CFrame.Position - rootPart.Position).Magnitude
                text.Text = string.format("Name: %s | Distance: %d", player.Name, math.floor(distance))

                -- Update tracer
                local screenPosition, onScreen = Camera:WorldToViewportPoint(rootPart.Position)
                if onScreen then
                    tracer.From = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y)
                    tracer.To = Vector2.new(screenPosition.X, screenPosition.Y)
                    tracer.Visible = true
                    tracer.Color = Color3.fromHSV(health / maxHealth, 1, 1)  -- Color changes based on health

                    -- Update the box color based on health
                    box.Color3 = Color3.fromHSV(health / maxHealth, 1, 1)  -- Smooth color shift based on health

                    -- Only make the box visible if the character is on screen and not obstructed by walls
                    if IsVisibleFromCamera(rootPart.Position) then
                        box.Visible = true
                    else
                        box.Visible = false
                    end
                else
                    tracer.Visible = false
                    box.Visible = false
                end
            else
                tracer.Visible = false
                box.Visible = false
            end
        end

        -- Connect RenderStepped to update Name Tag, Tracer, and Box
        local updateConnection = RunService.RenderStepped:Connect(UpdateNameTagAndTracer)

        -- Clean up when character dies
        character:WaitForChild("Humanoid").Died:Connect(function()
            tracer.Visible = false
            updateConnection:Disconnect()
            box:Destroy()
        end)
    end

    -- Handle existing character and future ones
    if player.Character then
        OnCharacterAdded(player.Character)
    end
    player.CharacterAdded:Connect(OnCharacterAdded)
end

-- Initialize for all current players
for _, player in ipairs(Players:GetPlayers()) do
    if player ~= Players.LocalPlayer then
        CreateTagAndTracer(player)
    end
end

-- Listen for new players joining
Players.PlayerAdded:Connect(function(player)
    if player ~= Players.LocalPlayer then
        CreateTagAndTracer(player)
    end
end)

-- AimBot Logic (New Addition)
local function AimAtTarget()
    -- Check if the left mouse button (LMB) is held
    if not isAimbotActive then
        return -- Exit if LMB is not held
    end

    -- Get the closest enemy player
    local closestPlayer = nil
    local closestDistance = math.huge

    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= Players.LocalPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            -- Team check: only aim at players not on the same team
            if player.Team ~= Players.LocalPlayer.Team then
                local rootPart = player.Character.HumanoidRootPart
                local screenPosition, onScreen = Camera:WorldToViewportPoint(rootPart.Position)

                -- Only consider players that are visible
                if onScreen and IsVisibleFromCamera(rootPart.Position) then
                    local distance = (Camera.CFrame.Position - rootPart.Position).Magnitude

                    -- If the player is closer, consider them
                    if distance < closestDistance then
                        closestDistance = distance
                        closestPlayer = player
                    end
                end
            end
        end
    end

    -- Aim silently at the closest player by adjusting their humanoid root part
    if closestPlayer then
        local targetPart = closestPlayer.Character:FindFirstChild("Head") or closestPlayer.Character:FindFirstChild("HumanoidRootPart")
        if targetPart then
            local direction = (targetPart.Position - Camera.CFrame.Position).unit
            local targetPosition = Camera.CFrame.Position + direction * 10  -- Adjust the aim silently
            closestPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(targetPosition)
        end
    end
end

-- Listen for Mouse Button Input
UserInputService.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        isAimbotActive = true
    end
end)

UserInputService.InputEnded:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        isAimbotActive = false
    end
end)

-- Call AimAtTarget in RenderStepped to keep checking the closest target
RunService.RenderStepped:Connect(AimAtTarget)